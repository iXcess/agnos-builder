diff --git a/cereal/messaging/event.cc b/cereal/messaging/event.cc
index a708de915..4e4536064 100644
--- a/cereal/messaging/event.cc
+++ b/cereal/messaging/event.cc
@@ -178,10 +178,12 @@ int Event::fd() const {
 }
 
 int Event::wait_for_one(const std::vector<Event>& events, int timeout_sec) {
-  struct pollfd fds[events.size()];
-  for (size_t i = 0; i < events.size(); i++) {
-    fds[i] = { events[i].fd(), POLLIN, 0 };
-  }
+  //struct pollfd fds[events.size()];
+  //for (size_t i = 0; i < events.size(); i++) {
+  //  fds[i] = { events[i].fd(), POLLIN, 0 };
+  //}
+
+  std::vector<struct pollfd> fds(events.size());
 
   struct timespec timeout = { timeout_sec, 0 };
 
@@ -192,7 +194,8 @@ int Event::wait_for_one(const std::vector<Event>& events, int timeout_sec) {
   sigdelset(&signals, SIGTERM);
   sigdelset(&signals, SIGQUIT);
 
-  int event_count = ppoll(fds, events.size(), timeout_sec < 0 ? nullptr : &timeout, &signals);
+  //int event_count = ppoll(fds, events.size(), timeout_sec < 0 ? nullptr : &timeout, &signals);
+  int event_count = ppoll(fds.data(), fds.size(), timeout_sec < 0 ? nullptr : &timeout, &signals);
 
   if (event_count == 0) {
     throw std::runtime_error("Event timed out pid: " + std::to_string(getpid()));
diff --git a/cereal/visionipc/ipc.cc b/cereal/visionipc/ipc.cc
index c4ab9a475..982f84f52 100644
--- a/cereal/visionipc/ipc.cc
+++ b/cereal/visionipc/ipc.cc
@@ -4,6 +4,7 @@
 #include <unistd.h>
 #include <assert.h>
 #include <errno.h>
+#include <vector>
 
 #include <sys/mman.h>
 #include <sys/socket.h>
@@ -59,8 +60,10 @@ int ipc_bind(const char* socket_path) {
 
 int ipc_sendrecv_with_fds(bool send, int fd, void *buf, size_t buf_size, int* fds, int num_fds,
                           int *out_num_fds) {
-  char control_buf[CMSG_SPACE(sizeof(int) * num_fds)];
-  memset(control_buf, 0, CMSG_SPACE(sizeof(int) * num_fds));
+  //char control_buf[CMSG_SPACE(sizeof(int) * num_fds)];
+  std::vector<char> control_buf(CMSG_SPACE(sizeof(int) * num_fds));
+  //memset(control_buf, 0, CMSG_SPACE(sizeof(int) * num_fds));
+  memset(control_buf.data(), 0, control_buf.size());
 
   struct iovec iov = {
     .iov_base = buf,
@@ -74,8 +77,10 @@ int ipc_sendrecv_with_fds(bool send, int fd, void *buf, size_t buf_size, int* fd
   if (num_fds > 0) {
     assert(fds);
 
-    msg.msg_control = control_buf;
-    msg.msg_controllen = CMSG_SPACE(sizeof(int) * num_fds);
+    //msg.msg_control = control_buf;
+    //msg.msg_controllen = CMSG_SPACE(sizeof(int) * num_fds);
+    msg.msg_control = control_buf.data();
+    msg.msg_controllen = control_buf.size();
   }
 
   if (send) {
